# IAM Roles codified from click-ops managed resources
# Generated by env0 MCP from AWS demo account (326535729404)

# Bedrock Knowledge Base Role - avner_test_schema
import {
  to = aws_iam_role.bedrock_knowledge_base_role
  id = "AmazonBedrockExecutionRoleForKnowledgeBase_avner_test_schema"
}

resource "aws_iam_role" "bedrock_knowledge_base_role" {
  name = "AmazonBedrockExecutionRoleForKnowledgeBase_avner_test_schema"
  path = "/service-role/"
  description = "Bedrock Knowledge Base access"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid = "AmazonBedrockKnowledgeBaseTrustPolicy"
        Effect = "Allow"
        Principal = {
          Service = "bedrock.amazonaws.com"
        }
        Action = "sts:AssumeRole"
        Condition = {
          StringEquals = {
            "aws:SourceAccount" = "326535729404"
          }
          ArnLike = {
            "aws:SourceArn" = "arn:aws:bedrock:us-east-1:326535729404:knowledge-base/*"
          }
        }
      }
    ]
  })
}

# Bedrock Knowledge Base Role - y0v5w
import {
  to = aws_iam_role.bedrock_knowledge_base_role_y0v5w
  id = "AmazonBedrockExecutionRoleForKnowledgeBase_y0v5w"
}

resource "aws_iam_role" "bedrock_knowledge_base_role_y0v5w" {
  name = "AmazonBedrockExecutionRoleForKnowledgeBase_y0v5w"
  path = "/service-role/"
  description = "Bedrock Knowledge Base access"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid = "TrustPolicyStatement"
        Effect = "Allow"
        Principal = {
          Service = "bedrock.amazonaws.com"
        }
        Action = "sts:AssumeRole"
        Condition = {
          StringEquals = {
            "aws:SourceAccount" = "326535729404"
          }
          ArnLike = {
            "aws:SourceArn" = "arn:aws:bedrock:us-east-1:326535729404:knowledge-base/*"
          }
        }
      }
    ]
  })
}

# Yariv Admin Role
import {
  to = aws_iam_role.yariv_admin
  id = "aws-role-yariv-admin"
}

resource "aws_iam_role" "yariv_admin" {
  name = "aws-role-yariv-admin"
  description = ""
  max_session_duration = 18000
}

# DSAF Lambda Role
import {
  to = aws_iam_role.dsaf_role
  id = "dsaf-role-g3hxf9mo"
}

resource "aws_iam_role" "dsaf_role" {
  name = "dsaf-role-g3hxf9mo"
  path = "/service-role/"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Production Admin Assumed Role
import {
  to = aws_iam_role.prod_admin
  id = "assumed-role-by-prod-admin"
}

resource "aws_iam_role" "prod_admin" {
  name = "assumed-role-by-prod-admin"
  description = ""
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "sts:AssumeRole"
        Principal = {
          AWS = "170412844252"
        }
        Condition = {
          StringEquals = {
            "sts:ExternalId" = "sdsd"
          }
        }
      }
    ]
  })
}

# Avner Test Role with External ID
import {
  to = aws_iam_role.avner_test_role
  id = "avner-test-for-new-external-id"
}

resource "aws_iam_role" "avner_test_role" {
  name = "avner-test-for-new-external-id"
  tags = {
    stage = "elbaz"
  }
}

# env0 PR Role
import {
  to = aws_iam_role.env0_role
  id = "pr17660.dev.env0.com-role"
}

resource "aws_iam_role" "env0_role" {
  name = "pr17660.dev.env0.com-role"
  description = ""
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "sts:AssumeRoleWithWebIdentity"
        Principal = {
          Federated = "arn:aws:iam::326535729404:oidc-provider/login.dev.env0.com/"
        }
        Condition = {
          StringEquals = {
            "login.dev.env0.com/:aud" = ["GkiC0e0bC3BcRbU7aflk8zpGpz3QhYEM"]
          }
        }
      }
    ]
  })
}

# SDFG Lambda Role
import {
  to = aws_iam_role.sdfg_role
  id = "sdfg-role-vuejx27f"
}

resource "aws_iam_role" "sdfg_role" {
  name = "sdfg-role-vuejx27f"
  path = "/service-role/"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# QuickSight Service Role
import {
  to = aws_iam_role.quicksight_service_role
  id = "aws-quicksight-service-role-v0"
}

resource "aws_iam_role" "quicksight_service_role" {
  name = "aws-quicksight-service-role-v0"
  path = "/service-role/"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "quicksight.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Acme Finance Production Role
import {
  to = aws_iam_role.acme_finance_prod
  id = "Acme-Finance-Prod-Role"
}

resource "aws_iam_role" "acme_finance_prod" {
  name = "Acme-Finance-Prod-Role"
  description = "This is a role for Omry and Styra webinar"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "sts:AssumeRole"
        Principal = {
          AWS = "913128560467"
        }
        Condition = {
          StringEquals = {
            "sts:ExternalId" = "159555bc-0cbd-4a65-9616-466f2f1793cd"
          }
        }
      }
    ]
  })
}

# Guy QA Role
import {
  to = aws_iam_role.guy_qa
  id = "guy-qa"
}

resource "aws_iam_role" "guy_qa" {
  name = "guy-qa"
  description = "hey daddy, wink"
  max_session_duration = 43200
}

# Production View-Only Role
import {
  to = aws_iam_role.prod_viewonly
  id = "assumed-role-by-prod-viewonly"
}

resource "aws_iam_role" "prod_viewonly" {
  name = "assumed-role-by-prod-viewonly"
  description = ""
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "sts:AssumeRole"
        Principal = {
          AWS = "913128560467"
        }
        Condition = {
          StringEquals = {
            "sts:ExternalId" = "fa3d6a63-1937-498e-a673-13c69d2204dc"
          }
        }
      }
    ]
  })
}

# Liran Test Role
import {
  to = aws_iam_role.liran_test
  id = "liran-test-pr19295"
}

resource "aws_iam_role" "liran_test" {
  name = "liran-test-pr19295"
  description = ""
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = "sts:AssumeRoleWithWebIdentity"
        Principal = {
          Federated = "arn:aws:iam::326535729404:oidc-provider/login.dev.env0.com/"
        }
        Condition = {
          StringEquals = {
            "login.dev.env0.com/:aud" = ["GkiC0e0bC3BcRbU7aflk8zpGpz3QhYEM"]
          }
        }
      }
    ]
  })
}

# Note: One role (yossi-test-demo) was found but did not have complete IaC generation data
