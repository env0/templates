apiVersion: v1
kind: Secret
metadata:
  name: vault-storage-config
  namespace: self-hosted-vault
stringData:
  config.hcl: |
    storage "postgresql" {
      connection_url="postgres://postgres:postgres123456!@postgres.self-hosted-vault.svc.cluster.local/postgres?sslmode=disable",
      table="vault_kv_store",
      ha_enabled=true,
      ha_table="vault_ha_locks"
    }
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: self-hosted-vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.4
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              value: "postgres123456!"
          volumeMounts:
            - name: setup-volume
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: setup-volume
          configMap:
            name: psql-vault-setup
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: self-hosted-vault
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: psql-vault-setup
  namespace: self-hosted-vault
data:
  vault-setup.sql: |
    CREATE TABLE IF NOT EXISTS vault_kv_store (
      parent_path TEXT COLLATE "C" NOT NULL,
      path        TEXT COLLATE "C",
      key         TEXT COLLATE "C",
      value       BYTEA,
      CONSTRAINT pkey PRIMARY KEY (path, key)
    );

    CREATE INDEX IF NOT EXISTS parent_path_idx ON vault_kv_store (parent_path);

    CREATE TABLE IF NOT EXISTS vault_ha_locks (
      ha_key                                      TEXT COLLATE "C" NOT NULL,
      ha_identity                                 TEXT COLLATE "C" NOT NULL,
      ha_value                                    TEXT COLLATE "C",
      valid_until                                 TIMESTAMP WITH TIME ZONE NOT NULL,
      CONSTRAINT ha_key PRIMARY KEY (ha_key)
    );
